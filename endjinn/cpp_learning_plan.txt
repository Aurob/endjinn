# C++ Learning Plan: 1 Hour/Day for 1 Week
# Actionable Long-term Knowledge for Game Development

## 🎯 The "1 Week C++ Crash Course"

### Days 1-2: Core Syntax & Memory (2 hours)
**Resource: TheCherno's C++ Series - Episodes 1-20**
- Variables, functions, pointers/references
- Stack vs heap, new/delete, smart pointers
- **Why this matters**: You'll understand the memory model that makes C++ powerful

### Days 3-4: OOP Essentials (2 hours)  
**Resource: Continue TheCherno - Episodes 25-40**
- Classes, constructors/destructors
- Inheritance, virtual functions, polymorphism
- **Why this matters**: You'll understand the OOP code we built (Platform/Graphics classes)

### Days 5-6: Modern C++ Features (2 hours)
**Resource: "A Tour of C++" Chapters 1-3 OR TheCherno's Modern C++ episodes**
- `auto`, range-based for loops
- `std::unique_ptr`, `std::shared_ptr`
- Lambda functions, `std::function`
- **Why this matters**: This is what makes C++ actually pleasant to write

### Day 7: Practice Integration (1 hour)
**Resource: Your own code!**
- Take our platform abstraction code
- Add a simple feature (like a new text color system)
- **Why this matters**: Cement everything with hands-on practice

## 🚀 Specific Actionable Focus

### Essential Terms to Master:
- **RAII** (Resource Acquisition Is Initialization) - The golden rule of C++
- **Smart Pointers** - `unique_ptr`, `shared_ptr` - never use raw `new`/`delete`
- **References vs Pointers** - When to use `&` vs `*`
- **Virtual Functions** - How our Platform abstraction works
- **Move Semantics** - `std::move`, why it matters for performance

### Practical Application:
After this week, you should be able to:

```cpp
// Understand this pattern (what we built):
std::unique_ptr<Platform> platform = PlatformFactory::create();

// Write this confidently:
class MyGameSystem {
private:
    std::vector<std::unique_ptr<Entity>> entities;
public:
    void addEntity(std::unique_ptr<Entity> entity) {
        entities.push_back(std::move(entity));
    }
};
```

## 📚 Why These Specific Resources

**TheCherno**: 
- Visual, game-focused examples
- Explains **why** not just **how**
- 15-20 minute episodes perfect for 1-hour sessions

**"A Tour of C++"**:
- Written by C++ creator
- Focuses on modern, practical C++
- Thin book, dense with useful info

## 🎯 Success Metric
By day 7, you should be able to look at our platform abstraction code and think 
"I understand why this is structured this way" rather than "this looks like magic."

This approach gives you the **minimum viable knowledge** to be dangerous with C++ 
in game development contexts.

## 🎮 Additional Fun Learning Resources (Non-Boring!)

### Game Development Focused:
1. **"Game Programming Patterns" by Robert Nystrom** - Available free online, covers C++ through actual game patterns. Super practical and engaging.

2. **Handmade Hero (Casey Muratori)** - YouTube series building a game from scratch in C. While it's C not C++, the principles are identical and Casey's approach is very functional/procedural.

3. **TheCherno's C++ Series** - YouTube channel with excellent modern C++ tutorials, very visual and project-based.

4. **Raylib + C++** - Start making 2D games immediately while learning. Much more rewarding than "hello world" console apps.

### Interactive/Project-Based:
1. **Advent of Code** - Annual programming puzzles, perfect for learning C++ features naturally
2. **LeetCode/HackerRank** - But pick the fun algorithmic ones, not the boring corporate interview prep
3. **Making small tools** - Write utilities you'll actually use (file converters, image processors, etc.)

### Modern C++ Focus:
- **"A Tour of C++" by Bjarne Stroustrup** - Short, focused on modern features
- **cppreference.com** - Best reference, great examples

## 🏗️ ECS vs OO for Platform Layer - Hybrid Approach Recommendation

### Keep OO for platform abstraction but use ECS for game logic:

**Why OO works better for platform:**
- Platform abstraction is inherently interface-based
- You typically have exactly one platform instance
- The polymorphism maps naturally to "different platforms, same interface"
- Less overhead for something that's not performance-critical

**Why ECS excels for game logic:**
- Game entities naturally fit ECS (players, enemies, bullets, etc.)
- Performance benefits from data locality
- Incredibly flexible for game behaviors
- EnTT is fantastic for this

### Best of Both Worlds:
```cpp
// Platform layer stays OO (what we built)
app.platform->pollEvents();
app.graphics->clear(GL_COLOR_BUFFER_BIT);

// Game world uses ECS
entt::registry world;

// Create entities with components
auto player = world.create();
world.emplace<Position>(player, 100.0f, 200.0f);
world.emplace<Velocity>(player, 0.0f, 0.0f);
world.emplace<Sprite>(player, "player.png");

// Systems update game logic
movementSystem.update(world, deltaTime);
renderSystem.update(world, *app.textRenderer);
```

This gives you:
- **Stable, clean platform abstraction** (OO)
- **Flexible, performant game logic** (ECS)
- **Clear separation of concerns**

The platform layer becomes the "host" that provides services to your ECS world, 
rather than trying to make the platform itself part of the ECS. You get the best 
of both paradigms!